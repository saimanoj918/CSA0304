#include <stdio.h>
#include <stdlib.h>
struct Node {
    int key, height;
    struct Node *left, *right;
};
int height(struct Node* n) {
    return n ? n->height : 0;
}
int max(int a, int b) {
    return (a > b) ? a : b;
}
struct Node* create(int key) {
    struct Node* n = malloc(sizeof(struct Node));
    n->key = key; n->left = n->right = NULL; n->height = 1;
    return n;
}
struct Node* rightRotate(struct Node* y) {
    struct Node* x = y->left;
    y->left = x->right;
    x->right = y;
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    return x;
}
struct Node* leftRotate(struct Node* x) {
    struct Node* y = x->right;
    x->right = y->left;
    y->left = x;
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    return y;
}
int getBalance(struct Node* n) {
    return n ? height(n->left) - height(n->right) : 0;
}
struct Node* insert(struct Node* node, int key) {
    if (!node) return create(key);
    if (key < node->key) node->left = insert(node->left, key);
    else if (key > node->key) node->right = insert(node->right, key);
    else return node;
    node->height = 1 + max(height(node->left), height(node->right));
    int balance = getBalance(node);
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
    return node;
}
void inorder(struct Node* root) {
    if (root) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}
int search(struct Node* root, int key) {
    if (!root) return 0;
    if (key == root->key) return 1;
    return key < root->key ? search(root->left, key) : search(root->right, key);
}
int main() {
    struct Node* root = NULL;
    root = insert(root, 20);
    root = insert(root, 10);
    root = insert(root, 30);
    root = insert(root, 25);
    root = insert(root, 40);
    printf("Inorder: ");
    inorder(root);
    printf("\nSearch 25: %s\n", search(root, 25) ? "Found" : "Not Found");
    return 0;
}
